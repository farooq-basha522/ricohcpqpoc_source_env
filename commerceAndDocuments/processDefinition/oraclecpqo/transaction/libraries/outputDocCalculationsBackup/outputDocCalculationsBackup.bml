//*****************************************************************************************************
//** Function:    Output Doc Calcuations Function
//**
//** Description: Set flags using commerce attribute, otherwise not feasible with built-in features on 
//**		doc designer
//**                                                                                               
//** History:	Date		Author     	Comment
//**				        HHo		     Initial Implementation
//**            01/13/17    RConaghan    Modified to allow "other" criteria and to allow for dynamic provision headers
//*****************************************************************************************************
ret = "";
sowDict = dict("string"); //string dict that holds sow for T&C
tcIteration = 1;
productGroupArr = string[]; //string array holding final productGroups
productGroupArrCall = string[]{"General Provisions", "Other Provisions"}; //Used for BMQL call
otherCriteriaArr = string[]; //Array of 'other criteria' such as 90 day out.
partsArr = string[];
validationError = ""; //Debug variable
nameValInnerDelim = "@@"; //Delimiter sepearating a name and value in a name-value pair
nameValOuterDelim = "##"; //Delimiter seperating sets of name-value pairs
sectionDelim = "^^"; //Delimiter seperating entire sections, with each section containing sets of name-value pairs.
headerNameFlag = "HEADER"; //Flag that doc engine will use to determine that we are on a new provision type.
provisionsDict = dict("string[]"); //Dict of key: Provision Name, and value: String array of all sow text files.
provisionsOutputString = ""; //Full formatted string to be written to provisions delimited string attribute.
provisionsPreSortOutputString = "";
provisionsUnsortedOutputString = "";
provisionsPostSortOutputString = "";
provisionPreSortArr = string[]; //Array that drives the SORTING of the provision headers on the output doc. Provisions not included here will be inserted in a semi-random order (order they were pulled from data table).
provisionPostSortArr = string[];

for line in transactionLine{
	partNum = line._part_number;
	productGroup = line._part_custom_field18;
	
	if(productGroup <> "" AND findinarray(productGroupArrCall, productGroup) == -1){
		append(productGroupArrCall, productGroup);
	}
	if(partNum <> "" AND findinarray(partsArr, partNum) == -1){
    	append(partsArr, partNum);
    }
}

//Build quote-level misc criteria
if(NinetyDayOut_t == true){
		append(otherCriteriaArr, "NINETY_DAY_OUT");
}
if(monthsFree_quote == "1"){
		append(otherCriteriaArr, "ONE_MONTH_FREE");
}

//TABLE CALLS - SOW Text
if(isempty(partsArr)){ //need to append a dummy value if array is empty
	append(partsArr, "-1");
}
if(isempty(otherCriteriaArr)){ //need to append a dummy value if array is empty
	append(otherCriteriaArr, "-1");
}
if(isempty(productGroupArrCall)){ //need to append a dummy value if array is empty
	append(productGroupArrCall, "-1");
}
sowSet = bmql("SELECT SOW_Provisions, SOW_Text FROM SOW WHERE SKU_Number IN $partsArr OR Product_Group IN $productGroupArrCall OR Other_Criteria IN $otherCriteriaArr OR (SKU_Number IS NULL AND Product_Group IS NULL AND Other_Criteria IS NULL)");

//Filter SOW with provisions
for each in sowSet{
	sow_provision = get(each, "SOW_Provisions");
	sow_text = get(each, "SOW_Text");
        
        if(findinarray(productGroupArr, sow_provision) == -1) {
        	append(productGroupArr, sow_provision);
        }
	if(containskey(sowDict,sow_provision)) {
		sow_temp = get(sowDict,sow_provision);           
		put(sowDict,sow_provision,sow_text + ","+ sow_temp);              
	} else {
		put(sowDict,sow_provision,sow_text);
	} 

	//@RConaghan - Wrote the pieces below in this loop; did not touch above yet.
	provisionClauseArr = string[]; //Provision clauses list within this provision
	if(containskey(provisionsDict, sow_provision)){
			provisionClauseArr = get(provisionsDict, sow_provision);
	}
	if(findinarray(provisionClauseArr, sow_text) == -1){ //Only add text if it hasn't been added in this provision yet.
		append(provisionClauseArr, sow_text);
	}
	put(provisionsDict, sow_provision, provisionClauseArr);
}

//@RConaghan - Begin Generic Provisions Work
//Enhancement possibility - make sorting data table driven.
//Add provisions in a 'pre-sort' to be added after any unsorted provisions.
append(provisionPreSortArr, "General Provisions");
//Add provisions in a 'post-sort' that will be added after any 'unsorted' provisions
append(provisionPostSortArr, "Other Provisions");

provisionList = keys(provisionsDict);
sortedProvisionList = string[]; //List of final, applicable provisions that exist
//Build list of final, applicable pre sort provisions
for preSortProvision in provisionPreSortArr{
	if(containskey(provisionsDict, preSortProvision)){
		indexToRemove = findinarray(provisionList, preSortProvision);
		if(indexToRemove <> -1){
			remove(provisionList, indexToRemove);
		}
		append(sortedProvisionList, preSortProvision);
	}
}
//for all post-sort attributes, remove from unsorted list and append to end
for postSortProvision in provisionPostSortArr{
	if(containskey(provisionsDict, postSortProvision)){
		indexToRemove = findinarray(provisionList, postSortProvision);
		if(indexToRemove <> -1){
			remove(provisionList, indexToRemove);
		}
		append(provisionList, postSortProvision);
	}
}
//we now have a list of 'pre-sorted' provisions that exist, and the unsorted + post-sorted provisions. Need to combine
for provision in provisionList{
	append(sortedProvisionList, provision);
}

provisionIndex = 1; //Provision numbers will have a format of X.Y. This is the X portion
for provisionType in sortedProvisionList{
	thisProvisionOutputString = "HEADER" + nameValInnerDelim + provisionType;
	provisionClauseList = get(provisionsDict, provisionType);
	clauseIndex = 1; //Provision number will have a format of X.Y. This is the Y portion
	for provisionClause in provisionClauseList{
		clauseFullIndex = string(provisionIndex) + "." + string(clauseIndex);
		thisProvisionOutputString = thisProvisionOutputString + nameValOuterDelim + clauseFullIndex + nameValInnerDelim + provisionClause;
		clauseIndex = clauseIndex + 1;
	}
	
	provisionsOutputString = provisionsOutputString + thisProvisionOutputString + sectionDelim;
	provisionIndex = provisionIndex + 1;
}

if(provisionsOutputString <> ""){
	provisionsOutputString = substring(provisionsOutputString, 0, -1 * len(sectionDelim)); //trim trailing delim
}

ret = ret + "1~" + "genericProvisionsOutputString_t" + "~"+ provisionsOutputString + "|";
//@RConaghan - End Generic Provisions Work

provisionAttrDict = dict("string");

//All Provisions with its attribute variable - Edit this section if additional Attribute being added
put(provisionAttrDict, "General Provisions", "generalProvisionProposal_t");
put(provisionAttrDict, "Other Provisions", "otherProvisionsProposal_t");
put(provisionAttrDict, "Total IT Management", "provisionsForTotalITManagementProposal_t");
put(provisionAttrDict, "cloudSHIFT VoIP", "provisionsForCloudSHIFTVoIPProposal_t");
put(provisionAttrDict, "cloudSHIFT Applications", "provisionsForCloudSHIFTApplicationsProposal_t");

for group in productGroupArr{
	//---Debug section
	if(containskey(provisionAttrDict,group) == false) {
		validationError = "SOW Table probably have a typo where SOW_Provisions not matching with existing Provisions. \nIf this is not a mistake, please add Provisions to provisionAttrDict and Commerce.\n";
		validationError = validationError + "a) Add put(provisionsAttrDict, \""+group+"\",\"[provisionsFor"+group+"Proposal_t]\"); to outputDocCalculations\n";
		validationError = validationError + "b) Add new Commerce attribute similar to \"Provisions for "+group+" Proposal[provisionsFor"+group+"Proposal_t]\"\n";
		validationError = validationError + "c) Add newly created commerce attribute to the layout.\n";
		validationError = validationError + "Non-existing SOW_Provisions: " + group;
	}
	//---end of Debug section
	
	if(containskey(sowDict, group)) {
		sow_notesTemp = get(sowDict, group);
                             
                sow_ordered = "";
                sow_notes = split(sow_notesTemp,",");
                for each in sow_notes {
                             sow_ordered = sow_ordered + string(tcIteration) + "-" + each + ",";
                             tcIteration = tcIteration + 1;
                }
                sow_ordered = substring(sow_ordered, 0, len(sow_ordered)-1);
                             
                attributeToWriteTo = util.safeGetString(provisionAttrDict, group);
                if(attributeToWriteTo <> ""){
                             ret = ret + "1~" + attributeToWriteTo + "~"+ sow_ordered + "|";
		}
	}
}

if(customerSolutionImage1_t <> "") {
	ret = ret + "1~customerSolutionImageFlag1_t~" + string(true) + "|";
} else {
	ret = ret + "1~customerSolutionImageFlag1_t~" + string(false) + "|";
}
if(customerSolutionImage2_t <> "") {
	ret = ret + "1~customerSolutionImageFlag2_t~" + string(true) + "|";
} else {
	ret = ret + "1~customerSolutionImageFlag2_t~" + string(false) + "|";
}

if(contractTermMonthsNumeric_t == 12) {
	ret = ret + "1~termAnniversary_t~first|";
} elif (contractTermMonthsNumeric_t == 24) {
	ret = ret + "1~termAnniversary_t~second|";
} elif (contractTermMonthsNumeric_t == 36) {
	ret = ret + "1~termAnniversary_t~third|";
} else {
	ret = ret + "1~termAnniversary_t~fifth|";
}

//---Debug section
if(validationError <> "") {
	ret = ret + "1~outputDocValidationErrorMessage_t~"+ validationError +"|";
} 
//---End of Debug section

return ret;